test

DCL
DML
Общие правила
При построении запроса обращение выполнять к витринам, а не к таблицам. Использование таблиц напрямую должно быть согласовано.
Знаки математических операций, операций сравнения, обрамляются одним пробелом слева и справа. Исключение составляет арифметический знак "-", применяемый с числом в качестве переменной.

Переменные в функцию необходимо передавать через запятую без пробела.
Если выражение вместе с алиасом по количеству символов превышает 80 знаков, его необходимо перенести на несколько строк таким образом, чтобы читаемость не была нарушена. Если невозможно выполнить разбивку выражения на несколько строк без потери читаемости, то допускается увеличение длины до 100 или 120 знаков.

В запросах и подзапросах алиасы таблиц формируются путем сокращения имен участвующих в запросе таблиц.
Для более удобного восприятия кода, содержащего большое количество ветвлений, а также блоков кода, размер текста которого превышает размеры страницы, рекомендуется оформлять end-statement комментарием, содержащим условие блока. Ко всем встроенным инструкциям SQL в коде хранимых процедур, триггеров, пользовательских функций должен применяться стиль оформления UPPER_CASE. Это относится как к SELECT, INSERT, UPDATE, DELETE, CREATE и прочим инструкциям, так и к вызовам extended stored procedures и встроенным функциям (SUBSTRING(), GETDATE() и пр.). 
Для структурирования кода используются пробелы. Один уровень вложенности = 4 пробелам. Символы табуляции должны быть конвертированы в соответствующее число пробелов.
Лишние пробелы в конце строк нежелательны.
При использовании объектов обязательно явно указывать схему, использовать конструкцию [..] запрещается.
В контексте текущей БД запрещено явно указание имени текущей БД.
Вызов процедуры только через команду EXEC с явным указанием переменных.

Стилистика написания кода
SELECT
После слова SELECT допускается расположение на той же строке только конструкций «DISTINCT» и «TOP n». 
Каждое выражение должно располагаться с новой строки с отступом 4 пробелами от начала команды, запятая располагается перед выражением без отступа. Для первого выражения дополнительно добавляется 1 пробел.
Для каждой используемой сущности, в запросе, должен быть указан алиас. Так же алиасы должны быть указаны для подзапросов. Алиас должен удовлетворять следующим условиям:
Состоит не менее чем из 2 символов (т.е. алиас в 2 и более символов разрешён).
Отражает суть объекта, или является его сокращением.
Не содержит цифр.
Если выражению присваивается новое имя, то при переименовании обязательно указание ключевого слова «AS», справа и слева от ключевого слова отступ в 1 пробел.
В случае использования подзапроса открывающая скобка располагается без пробела на той же строке, что и предыдущая команда.
Закрывающая скобка должна быть выровнена по началу строки с открывающей скобкой.
Текст подзапроса должен начинаться с новой строки с дополнительным отступом в 4 пробела.
Обязательно наличие «;» в конце команды.

SELECT
     tn.code
    ,tn.name
FROM(
    SELECT TOP 100
         tn.id
        ,tn.code
        ,tn.name
		,tn.secondtableid
    FROM dbname.schemaname.tablename AS tn;
) AS tn;

INSERT
Обязательно перечисление полей. Использование конструкции с аргументом VALUES не является исключением!
Каждое выражение должно располагаться с новой строки с отступом 4 пробелами от начала команды, запятая располагается перед выражением без отступа. Для первого выражения дополнительно добавляется 1 пробел.
Открывающая скобка располагается без пробела на той же строке, что и начало команды.
Закрывающая скобка должна быть выровнена по началу строки с открывающей скобкой.
После конструкции INSERT INTO  перечисление полей допускается на той же строке только в том случае, когда их количество строго меньше трех.

INSERT INTO #temptable(
     id
    ,code
    ,name
    ,secondtableid
)
SELECT TOP 100
	 tn.id
	,tn.code
	,tn.name
	,tn.secondtableid
FROM dbname.schemaname.tablename AS tn;

DELETE
На одной строке с DELETE FROM должен располагаться алиас сущности, в которой происходит удаление.

DELETE tn
FROM dbname.schemaname.tablename AS tn;


CASE
Ключевые слова WHEN и ELSE располагаются с новой строки с отступом в 4 пробела от слова CASE.
Ключевое слово END располагается на том же уровне, что и слово CASE, выравнивать надо по первому символу строки, на которой располагается CASE.
Обязательно явное указание условие ELSE.
При одноранговых проверках необходимо использовать функцию IIF.
В случае, если необходим дополнительный CASE внутри CASE следует расположить его после WHEN с новой строки с отступом в 4 пробела.

SELECT
     stn.id
    ,stn.secondtableid
    ,CASE
        WHEN
            CASE
                WHEN stn.typeId IN (1,2,9)
                THEN 1
                ELSE 0
            END = 1
        THEN 1
        WHEN stn.typeId = 24
        THEN 3
        WHEN stn.typeId IS NULL
        THEN 4
        ELSE 0
    END AS typeId
    ,stn.id AS stnId
    ,stn.code
    ,stn.name
    ,IIF(stn.typeId IN (1,2,9,341,24), 1, 0) AS isCalc
FROM dbname.schemaname.tablename AS tn
LEFT JOIN dbname.schemaname.secondtablename AS stn
    ON tn.secondtableid = stn.Id
    AND stn.typeId IS NOT NULL
ORDER BY
    stn.id ASC;
	
Оконные функции в SELECT
Открывающая скобка выражения «OVER» располагается без пробела на той же строке, что и начало команды.
Закрывающая скобка должна быть выровнена по началу строки с открывающей скобкой.
Внутри скобок выражения «OVER» ключевые слова «PARTITION BY», «ORDER BY», «ROWS BETWEEN», «RANGE BETWEEN» выравниваются в 1 колонку слева, располагаются каждое на новой строке с отступом в 4 пробела. Поля для каждого подвыражения располагаются с новой строки, аналогично выражениям в SELECT (слева 4 пробела, запятая, выражение без отступа).

SELECT TOP 100
     tn.id
    ,tn.secondtableid
    ,tn.code
    ,tn.name
    ,SUM(tn.sales) OVER(
        PARTITION BY
            tn.tradeid
        ORDER BY
            tn.id ASC
        ROWS BETWEEN
            UNBOUNDED PRECEDING AND
            CURRENT ROW
    ) AS totalsales
FROM dbname.schemaname.tablename AS tn;

JOIN
Прямое соединение обязательно указывать с ключевым словом INNER.
Левое соединение указывать как LEFT JOIN, то есть опустить ключевое слово OUTER.
Правое соединение (RIGHT JOIN) не использовать, запрос необходимо пересобрать под LEFT JOIN.
Полное внешнее соединение указывать как FULL JOIN, ключевое слово OUTER опустить.
Аргументы LOOP, HASH, MERGE, REMOTE разрешено использовать точечно только с согласования.
WHERE
Если в запросе используется WHERE, то обязательно пишем 1 = 1.

Комментарии
Комментарии необходимо оставлять только на неочевидных местах кода, нет необходимости комментировать весь код. Комментарии необходимо оставлять, отвечая на вопрос «Зачем это здесь», а не «Что здесь».
Комментарии должны быть актуальны.
Не комментировать ненужный код. Ненужный код необходимо удалять.
Правила создания расширенных свойств объектов
Каждому объекту необходимо создать и заполнить расширенные свойства:
